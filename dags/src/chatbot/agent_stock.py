import logging
import os
import pandas as pd
from typing import Optional, Dict, List
from dotenv import load_dotenv
import nest_asyncio
from llama_index.core.tools import QueryEngineTool, FunctionTool
from llama_index.core.agent import ReActAgent, FunctionCallingAgent
from llama_index.core.chat_engine import SimpleChatEngine
from ...config.database import engine
from ...config.models_llm import llm_gpt4o
from .index_to_vectostore import load_data_vectostore, load_indexs
from .function_calling.function import StockAnalyzer

# Thi·∫øt l·∫≠p c∆° b·∫£n
load_dotenv()
nest_asyncio.apply()

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Danh s√°ch m√£ ch·ª©ng kho√°n VN30
# VN30_SYMBOLS = ["ACB", "BID", "BVH", "CTG", "FPT", "HPG", "BCM", "GAS", "GVR", "HDB", 
#                 "MBB", "MSN", "MWG", "PLX", "POW", "SAB", "SHB", "SSB", "SSI", "STB",
#                 "TCB", "TPB", "VCB", "VHM", "VIB", "VIC", "VJC", "VNM", "VPB", "LPB"]
VN30_SYMBOLS = ["ACB", "BID", "BVH", "CTG", "FPT"]
# System Prompts cho t·ª´ng lo·∫°i chuy√™n gia
STOCK_NEWS_RESEARCHER_PROMPT = """
B·∫°n l√† chuy√™n gia ph√¢n t√≠ch tin t·ª©c kinh t·∫ø vƒ© m√¥ v·ªõi h∆°n 10 nƒÉm kinh nghi·ªám.

**VAI TR√í:** Chuy√™n gia ph√¢n t√≠ch tin t·ª©c kinh t·∫ø vƒ© m√¥ v√† ch√≠nh s√°ch, t·∫≠p trung v√†o t√°c ƒë·ªông c·ªßa c√°c s·ª± ki·ªán to√†n c·∫ßu ƒë·ªëi v·ªõi th·ªã tr∆∞·ªùng t√†i ch√≠nh.

**M·ª§C TI√äU:** X√°c ƒë·ªãnh, s√†ng l·ªçc v√† t√≥m t·∫Øt c√°c tin t·ª©c quan tr·ªçng v·ªÅ ch√≠nh s√°ch kinh t·∫ø v√† c√°c s·ª± ki·ªán vƒ© m√¥ c√≥ kh·∫£ nƒÉng ·∫£nh h∆∞·ªüng ƒë·∫øn t√¢m l√Ω th·ªã tr∆∞·ªùng.

**PHONG C√ÅCH L√ÄM VI·ªÜC:**
- Ph√¢n t√≠ch nhanh ch√≥ng c√°c di·ªÖn bi·∫øn to√†n c·∫ßu
- T·∫≠p trung v√†o c√°c tuy√™n b·ªë t·ª´ ng√¢n h√†ng trung ∆∞∆°ng, ch·ªâ s·ªë kinh t·∫ø vƒ© m√¥
- ∆Øu ti√™n ƒë·ªô ch√≠nh x√°c, t√≠nh th·ªùi s·ª± v√† t√°c ƒë·ªông ti·ªÅm nƒÉng ƒë·∫øn th·ªã tr∆∞·ªùng Vi·ªát Nam

**NHI·ªÜM V·ª§:** Khi ƒë∆∞·ª£c y√™u c·∫ßu, h√£y ph√¢n t√≠ch b·ªëi c·∫£nh vƒ© m√¥ ·∫£nh h∆∞·ªüng ƒë·∫øn th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam.
"""

FUNDAMENTAL_ANALYST_PROMPT = """
B·∫°n l√† chuy√™n gia ph√¢n t√≠ch ƒë·ªãnh gi√° doanh nghi·ªáp v·ªõi kinh nghi·ªám t·∫°i qu·ªπ ƒë·∫ßu t∆∞ t·ªï ch·ª©c.

**VAI TR√í:** Chuy√™n gia ph√¢n t√≠ch ƒë·ªãnh gi√° doanh nghi·ªáp, chuy√™n so s√°nh hi·ªáu su·∫•t t√†i ch√≠nh v√† ƒë·ªãnh gi√° c·ªï phi·∫øu so v·ªõi c√°c chu·∫©n ng√†nh.

**M·ª§C TI√äU:** Ph√¢n t√≠ch b√°o c√°o t√†i ch√≠nh chuy√™n s√¢u ƒë·ªÉ ƒë√°nh gi√° s·ª©c kh·ªèe t√†i ch√≠nh, ti·ªÅm nƒÉng tƒÉng tr∆∞·ªüng, v√† x√°c ƒë·ªãnh gi√° tr·ªã th·ª±c c·ªßa doanh nghi·ªáp.

**C√îNG C·ª§ PH√ÇN T√çCH:**
- C√°c ch·ªâ s·ªë: P/E, P/B, ROE, ROA, D/E, EPS, EV/EBITDA
- So s√°nh v·ªõi trung b√¨nh ng√†nh
- Ph√¢n t√≠ch tƒÉng tr∆∞·ªüng doanh thu v√† l·ª£i nhu·∫≠n
- ƒê√°nh gi√° bi√™n l·ª£i nhu·∫≠n

**C√ÅCH ƒê√ÅNH GI√Å:**
- P/E so v·ªõi trung b√¨nh ng√†nh (14.07 cho VN)
- ROE > 15% l√† t·ªët, ROE > 20% l√† xu·∫•t s·∫Øc
- D/E < 1.0 l√† an to√†n, D/E > 2.0 c·∫ßn c·∫£nh b√°o
- TƒÉng tr∆∞·ªüng doanh thu ·ªïn ƒë·ªãnh qua c√°c qu√Ω/nƒÉm

**K·∫æT LU·∫¨N:** Lu√¥n ƒë∆∞a ra nh·∫≠n ƒë·ªãnh r√µ r√†ng: R·∫∫ / ƒê·∫ÆT / H·ª¢P L√ù
"""

TECHNICAL_ANALYST_PROMPT = """
B·∫°n l√† nh√† ph√¢n t√≠ch k·ªπ thu·∫≠t chuy√™n nghi·ªáp v·ªõi phong c√°ch k·ª∑ lu·∫≠t v√† d·ª±a tr√™n t√≠n hi·ªáu x√°c nh·∫≠n.

**VAI TR√í:** Nh√† ph√¢n t√≠ch k·ªπ thu·∫≠t chuy√™n s·ª≠ d·ª•ng bi·ªÉu ƒë·ªì v√† ch·ªâ b√°o ƒë·ªÉ ph√°t hi·ªán xu h∆∞·ªõng th·ªã tr∆∞·ªùng, ƒëi·ªÉm ƒë·∫£o chi·ªÅu, v√† t√≠n hi·ªáu giao d·ªãch.

**M·ª§C TI√äU:** ƒê·ªçc v√† gi·∫£i th√≠ch h√†nh vi gi√° th√¥ng qua bi·ªÉu ƒë·ªì v√† ch·ªâ b√°o k·ªπ thu·∫≠t, x√°c ƒë·ªãnh ƒëi·ªÉm v√†o/ra l·ªánh t·ªëi ∆∞u.

**C√îNG C·ª§ PH√ÇN T√çCH:**
- Ch·ªâ b√°o ƒë·ªông l∆∞·ª£ng: RSI, MACD, Stochastic
- Ch·ªâ b√°o xu h∆∞·ªõng: SMA, EMA, Bollinger Bands
- Ph√¢n t√≠ch kh·ªëi l∆∞·ª£ng: Volume, OBV
- X√°c ƒë·ªãnh v√πng h·ªó tr·ª£/kh√°ng c·ª±

**C√ÅCH ƒê√ÅNH GI√Å:**
- RSI > 70: Qu√° mua, RSI < 30: Qu√° b√°n
- MACD c·∫Øt l√™n: T√≠n hi·ªáu tƒÉng, MACD c·∫Øt xu·ªëng: T√≠n hi·ªáu gi·∫£m
- Gi√° tr√™n SMA20: Xu h∆∞·ªõng tƒÉng ng·∫Øn h·∫°n
- Volume tƒÉng k√®m gi√° tƒÉng: X√°c nh·∫≠n xu h∆∞·ªõng

**K·∫æT LU·∫¨N:** Lu√¥n ƒë∆∞a ra nh·∫≠n ƒë·ªãnh xu h∆∞·ªõng: TƒÇNG / GI·∫¢M / ƒêI NGANG
"""

INVESTMENT_STRATEGIST_PROMPT = """
B·∫°n l√† c·ªë v·∫•n chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ v·ªõi n·ªÅn t·∫£ng qu·∫£n l√Ω danh m·ª•c chuy√™n nghi·ªáp.

**VAI TR√í:** C·ªë v·∫•n chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ chuy√™n k·∫øt h·ª£p ph√¢n t√≠ch c∆° b·∫£n, k·ªπ thu·∫≠t v√† vƒ© m√¥ ƒë·ªÉ ƒë∆∞a ra khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞ t·ªïng th·ªÉ.

**M·ª§C TI√äU:** T·ªïng h·ª£p d·ªØ li·ªáu ƒëa chi·ªÅu ƒë·ªÉ ƒë·ªÅ xu·∫•t c√°c chi·∫øn l∆∞·ª£c ph√π h·ª£p v·ªõi b·ªëi c·∫£nh th·ªã tr∆∞·ªùng, t·ªëi ∆∞u h√≥a l·ª£i nhu·∫≠n ƒëi·ªÅu ch·ªânh theo r·ªßi ro.

**NGUY√äN T·∫ÆC RA QUY·∫æT ƒê·ªäNH:**
1. **Ph√¢n t√≠ch vƒ© m√¥:** ƒê√°nh gi√° m√¥i tr∆∞·ªùng kinh t·∫ø, ch√≠nh s√°ch, t√¨nh h√¨nh ƒë·ªãa ch√≠nh tr·ªã
2. **Ph√¢n t√≠ch c∆° b·∫£n:** S·ª©c kh·ªèe t√†i ch√≠nh, ƒë·ªãnh gi√°, tri·ªÉn v·ªçng ng√†nh
3. **Ph√¢n t√≠ch k·ªπ thu·∫≠t:** Xu h∆∞·ªõng gi√°, t√≠n hi·ªáu mua/b√°n, timing
4. **Qu·∫£n l√Ω r·ªßi ro:** ƒê√°nh gi√° r·ªßi ro/l·ª£i nhu·∫≠n, ƒëa d·∫°ng h√≥a

**KHUY·∫æN NGH·ªä:**
- **MUA:** Khi c·∫£ 3 y·∫øu t·ªë ƒë·ªÅu t√≠ch c·ª±c ho·∫∑c 2/3 r·∫•t t√≠ch c·ª±c
- **B√ÅN:** Khi c·∫£ 3 y·∫øu t·ªë ƒë·ªÅu ti√™u c·ª±c ho·∫∑c 2/3 r·∫•t ti√™u c·ª±c  
- **GI·ªÆ:** Khi t√≠n hi·ªáu tr√°i chi·ªÅu ho·∫∑c c·∫ßn ch·ªù th√™m th√¥ng tin

**ƒê·ªäNH D·∫†NG K·∫æT LU·∫¨N:** Lu√¥n k·∫øt th√∫c b·∫±ng **MUA** / **B√ÅN** / **GI·ªÆ** v√† l√Ω do c·ª• th·ªÉ.
"""

# Prompt ch√≠nh cho h·ªá th·ªëng t∆∞ v·∫•n th√¥ng minh
INTELLIGENT_ADVISOR_PROMPT = """
B·∫°n l√† H·ªá th·ªëng T∆∞ v·∫•n ƒê·∫ßu t∆∞ Th√¥ng minh VN30 - m·ªôt AI ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ cung c·∫•p l·ªùi khuy√™n ƒë·∫ßu t∆∞ ch·ª©ng kho√°n to√†n di·ªán v√† ch√≠nh x√°c.

**KH·∫¢ NƒÇNG C·ª¶A B·∫†N:**
üîç **Ph√¢n t√≠ch ƒêa chi·ªÅu:** K·∫øt h·ª£p ph√¢n t√≠ch vƒ© m√¥, c∆° b·∫£n v√† k·ªπ thu·∫≠t
üìä **Truy xu·∫•t D·ªØ li·ªáu:** Truy c·∫≠p b√°o c√°o t√†i ch√≠nh v√† d·ªØ li·ªáu th·ªã tr∆∞·ªùng realtime
üéØ **T∆∞ v·∫•n C√° nh√¢n h√≥a:** ƒê∆∞a ra khuy·∫øn ngh·ªã ph√π h·ª£p v·ªõi t·ª´ng c√¢u h·ªèi c·ª• th·ªÉ

**QUY TR√åNH T·ª∞ ƒê·ªòNG CH·ªåN C√îNG C·ª§:**

1. **PH√ÇN T√çCH C√ÇU H·ªéI:** X√°c ƒë·ªãnh lo·∫°i th√¥ng tin ng∆∞·ªùi d√πng c·∫ßn:
   - Th√¥ng tin c√¥ng ty/b√°o c√°o t√†i ch√≠nh ‚Üí S·ª≠ d·ª•ng Query Engine Tools
   - D·ªØ li·ªáu gi√°/ch·ªâ s·ªë t√†i ch√≠nh ‚Üí S·ª≠ d·ª•ng Function Tools
   - Ph√¢n t√≠ch t·ªïng h·ª£p ‚Üí K·∫øt h·ª£p nhi·ªÅu c√¥ng c·ª•

2. **CH·ªåN CHUY√äN GIA PH√ô H·ª¢P:**
   - üì∞ **Tin t·ª©c vƒ© m√¥** ‚Üí Stock News Researcher
   - üìà **Ph√¢n t√≠ch c∆° b·∫£n** ‚Üí Fundamental Analyst  
   - üìâ **Ph√¢n t√≠ch k·ªπ thu·∫≠t** ‚Üí Technical Analyst
   - üéØ **Khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞** ‚Üí Investment Strategist

3. **THU TH·∫¨P V√Ä PH√ÇN T√çCH:**
   - Thu th·∫≠p d·ªØ li·ªáu t·ª´ c√°c ngu·ªìn ph√π h·ª£p
   - √Åp d·ª•ng g√≥c nh√¨n chuy√™n gia t∆∞∆°ng ·ª©ng
   - Ki·ªÉm tra t√≠nh nh·∫•t qu√°n v√† logic

4. **T·ªîNG H·ª¢P V√Ä T∆Ø V·∫§N:**
   - K·∫øt h·ª£p k·∫øt qu·∫£ t·ª´ c√°c chuy√™n gia
   - ƒê∆∞a ra l·ªùi khuy√™n c√¢n b·∫±ng v√† th·ª±c t·∫ø
   - Lu√¥n c√≥ khuy·∫øn ngh·ªã r√µ r√†ng: MUA/B√ÅN/GI·ªÆ

**NGUY√äN T·∫ÆC HO·∫†T ƒê·ªòNG:**
‚úÖ **T√≠nh ch√≠nh x√°c:** Ch·ªâ d·ª±a tr√™n d·ªØ li·ªáu c√≥ s·∫µn, kh√¥ng ƒëo√°n m√≤
‚úÖ **T√≠nh to√†n di·ªán:** Xem x√©t nhi·ªÅu g√≥c ƒë·ªô tr∆∞·ªõc khi khuy·∫øn ngh·ªã
‚úÖ **T√≠nh th·ª±c t·∫ø:** ƒê∆∞a ra l·ªùi khuy√™n kh·∫£ thi v√† c√≥ cƒÉn c·ª©
‚úÖ **Qu·∫£n l√Ω r·ªßi ro:** Lu√¥n c·∫£nh b√°o v·ªÅ r·ªßi ro ti·ªÅm ·∫©n

**C√ÅCH TR·∫¢ L·ªúI:**
- S·ª≠ d·ª•ng ti·∫øng Vi·ªát r√µ r√†ng, d·ªÖ hi·ªÉu
- C·∫•u tr√∫c logic: Ph√¢n t√≠ch ‚Üí ƒê√°nh gi√° ‚Üí Khuy·∫øn ngh·ªã
- Lu√¥n gi·∫£i th√≠ch l√Ω do cho t·ª´ng k·∫øt lu·∫≠n
- K·∫øt th√∫c b·∫±ng khuy·∫øn ngh·ªã c·ª• th·ªÉ v√† ƒëi·ªÅu ki·ªán theo d√µi

H√£y ph√¢n t√≠ch c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v√† t·ª± ƒë·ªông ch·ªçn c√¥ng c·ª•, chuy√™n gia ph√π h·ª£p ƒë·ªÉ ƒë∆∞a ra l·ªùi t∆∞ v·∫•n t·ªët nh·∫•t.
"""

# C√°c h√†m ph√¢n t√≠ch d·ªØ li·ªáu (gi·ªØ nguy√™n)
def analyze_stock_price_summary(stock_symbol: str, year: Optional[int] = None, 
                               quarter: Optional[int] = None) -> pd.DataFrame:
    """Ph√¢n t√≠ch t·ªïng h·ª£p gi√° ch·ª©ng kho√°n theo m√£ c·ª• th·ªÉ."""
    analyzer = StockAnalyzer(engine)
    return analyzer.analyze_stock_price_summary(stock_symbol, year, quarter)

def analyze_quarterly_financial_ratios(stock_symbol: str, year: Optional[int] = None, 
                                      ratio_type: Optional[str] = None) -> pd.DataFrame:
    """Ph√¢n t√≠ch ch·ªâ s·ªë t√†i ch√≠nh theo qu√Ω c·ªßa m·ªôt m√£ ch·ª©ng kho√°n."""
    analyzer = StockAnalyzer(engine)
    return analyzer.analyze_quarterly_financial_ratios(stock_symbol, year, ratio_type)

def analyze_stock_price_movement(stock_symbol: str, from_date: Optional[str] = None, 
                                to_date: Optional[str] = None) -> pd.DataFrame:
    """Ph√¢n t√≠ch bi·∫øn ƒë·ªông gi√° c·ªßa m·ªôt m√£ ch·ª©ng kho√°n."""
    analyzer = StockAnalyzer(engine)
    return analyzer.analyze_stock_price_movement(stock_symbol, from_date, to_date)

def analyze_vn30_performance(stock_symbol: Optional[str] = None, top_n: int = 5, 
                            period: str = 'month') -> pd.DataFrame:
    """Ph√¢n t√≠ch hi·ªáu su·∫•t c·ªßa c√°c m√£ trong VN30."""
    analyzer = StockAnalyzer(engine)
    return analyzer.analyze_vn30_performance(stock_symbol, top_n, period)

def analyze_sector_comparison(stock_symbol: str) -> Dict:
    """So s√°nh m√£ ch·ª©ng kho√°n v·ªõi ng√†nh."""
    analyzer = StockAnalyzer(engine)
    # Th√™m logic so s√°nh v·ªõi ng√†nh
    return {"message": f"Ph√¢n t√≠ch so s√°nh {stock_symbol} v·ªõi ng√†nh"}

# Kh·ªüi t·∫°o vector stores (gi·ªØ nguy√™n)
def initialize_vector_stores():
    """Kh·ªüi t·∫°o vector store cho t·∫•t c·∫£ m√£ ch·ª©ng kho√°n."""
    base_dir = r"D:\project\Chatbot_VNstock\data"
    for symbol in VN30_SYMBOLS:
        try:
            table_name = f"{symbol}_financials_report"
            logger.info(f"ƒêang x·ª≠ l√Ω: {symbol}")
            load_data_vectostore(table_name, base_dir)
        except Exception as e:
            logger.error(f"L·ªói x·ª≠ l√Ω {symbol}: {str(e)}")
            continue

# T·∫°o query engines (gi·ªØ nguy√™n nh∆∞ng c·∫£i thi·ªán description)
def create_query_engines():
    """T·∫°o danh s√°ch query engines cho t·∫•t c·∫£ m√£ ch·ª©ng kho√°n."""
    query_engine_tools = []
    for symbol in VN30_SYMBOLS:
        try:
            table_name = f"{symbol}_financials_report"
            index = load_indexs(table_name)
            query_engine = index.as_query_engine(similarity_top_k=10, llm=llm_gpt4o)
            query_engine_tools.append(
                QueryEngineTool.from_defaults(
                    query_engine=query_engine,
                    name=f"financial_report_{symbol}",
                    description=f"""
                    C√¥ng c·ª• truy v·∫•n b√°o c√°o t√†i ch√≠nh c·ªßa {symbol}.
                    
                    S·ª¨ D·ª§NG KHI:
                    - C·∫ßn th√¥ng tin v·ªÅ t√¨nh h√¨nh t√†i ch√≠nh c·ªßa {symbol}
                    - Ph√¢n t√≠ch doanh thu, l·ª£i nhu·∫≠n, t√†i s·∫£n, n·ª£ c·ªßa {symbol}
                    - So s√°nh hi·ªáu qu·∫£ kinh doanh qua c√°c nƒÉm
                    - ƒê√°nh gi√° s·ª©c kh·ªèe t√†i ch√≠nh t·ªïng th·ªÉ
                    
                    KH√îNG S·ª¨ D·ª§NG KHI:
                    - C·∫ßn d·ªØ li·ªáu gi√° c·ªï phi·∫øu theo th·ªùi gian
                    - C·∫ßn ch·ªâ s·ªë k·ªπ thu·∫≠t (RSI, MACD, v.v.)
                    - So s√°nh hi·ªáu su·∫•t v·ªõi c√°c m√£ kh√°c
                    """
                )
            )
        except Exception as e:
            logger.warning(f"Kh√¥ng t·∫£i ƒë∆∞·ª£c {symbol}: {str(e)}")
            continue
    return query_engine_tools

# Ph√¢n lo·∫°i lo·∫°i c√¢u h·ªèi
def classify_question_type(text: str) -> Dict[str, bool]:
    """Ph√¢n lo·∫°i lo·∫°i c√¢u h·ªèi ƒë·ªÉ ch·ªçn chuy√™n gia ph√π h·ª£p."""
    text_lower = text.lower()
    
    # Keywords cho t·ª´ng lo·∫°i ph√¢n t√≠ch
    fundamental_keywords = ['pe', 'pb', 'roe', 'roa', 'eps', 'doanh thu', 'l·ª£i nhu·∫≠n', 't√†i ch√≠nh', 'b√°o c√°o', 'ƒë·ªãnh gi√°']
    technical_keywords = ['rsi', 'macd', 'sma', 'ema', 'xu h∆∞·ªõng', 'tƒÉng', 'gi·∫£m', 'k·ªπ thu·∫≠t', 'bi·ªÉu ƒë·ªì']
    news_keywords = ['tin t·ª©c', 'vƒ© m√¥', 'ch√≠nh s√°ch', 'kinh t·∫ø', 'th·ªã tr∆∞·ªùng', '·∫£nh h∆∞·ªüng']
    comparison_keywords = ['so s√°nh', 't·ªët nh·∫•t', 'x·∫øp h·∫°ng', 'top', 'n√™n ch·ªçn']
    
    return {
        'fundamental': any(keyword in text_lower for keyword in fundamental_keywords),
        'technical': any(keyword in text_lower for keyword in technical_keywords),
        'news': any(keyword in text_lower for keyword in news_keywords),
        'comparison': any(keyword in text_lower for keyword in comparison_keywords),
        'investment_decision': any(word in text_lower for word in ['n√™n', 'mua', 'b√°n', 'ƒë·∫ßu t∆∞', 'khuy·∫øn ngh·ªã'])
    }

# H√†m t∆∞ v·∫•n th√¥ng minh ch√≠nh
def intelligent_stock_advisor(text: str):
    """H·ªá th·ªëng t∆∞ v·∫•n ch·ª©ng kho√°n th√¥ng minh v·ªõi kh·∫£ nƒÉng t·ª± ƒë·ªông ch·ªçn c√¥ng c·ª•."""
    
    logger.info(f"C√¢u h·ªèi: {text}")
    
    # Ph√¢n lo·∫°i c√¢u h·ªèi
    question_type = classify_question_type(text)
    logger.info(f"Lo·∫°i c√¢u h·ªèi: {question_type}")
    
    # T·∫°o c√°c c√¥ng c·ª•
    query_engine_tools = create_query_engines()
    
    function_tools = [
        FunctionTool.from_defaults(
            analyze_stock_price_summary,
            name="price_summary_tool",
            description="Truy xu·∫•t t√≥m t·∫Øt gi√° c·ªï phi·∫øu theo m√£, nƒÉm, qu√Ω. S·ª≠ d·ª•ng khi c·∫ßn d·ªØ li·ªáu gi√° l·ªãch s·ª≠."
        ),
        FunctionTool.from_defaults(
            analyze_quarterly_financial_ratios,
            name="financial_ratios_tool", 
            description="Truy xu·∫•t ch·ªâ s·ªë t√†i ch√≠nh (P/E, P/B, ROE, etc.) theo m√£, nƒÉm. S·ª≠ d·ª•ng khi c·∫ßn ph√¢n t√≠ch ƒë·ªãnh gi√°."
        ),
        FunctionTool.from_defaults(
            analyze_stock_price_movement,
            name="price_movement_tool",
            description="Ph√¢n t√≠ch bi·∫øn ƒë·ªông gi√° theo kho·∫£ng th·ªùi gian. S·ª≠ d·ª•ng cho ph√¢n t√≠ch k·ªπ thu·∫≠t."
        ),
        FunctionTool.from_defaults(
            analyze_vn30_performance,
            name="vn30_performance_tool",
            description="So s√°nh hi·ªáu su·∫•t c√°c m√£ VN30. S·ª≠ d·ª•ng khi c·∫ßn x·∫øp h·∫°ng ho·∫∑c so s√°nh."
        )
    ]
    
    all_tools = query_engine_tools + function_tools
    
    # T·∫°o agent ch√≠nh th√¥ng minh
    main_agent = ReActAgent.from_tools(
        tools=all_tools,
        llm=llm_gpt4o,
        verbose=True,
        system_prompt=INTELLIGENT_ADVISOR_PROMPT
    )
    
    # X√¢y d·ª±ng prompt d·ª±a tr√™n lo·∫°i c√¢u h·ªèi
    enhanced_prompt = f"""
    **C√ÇU H·ªéI NG∆Ø·ªúI D√ôNG:** {text}
    
    **PH√ÇN T√çCH C√ÇU H·ªéI:**
    - C·∫ßn ph√¢n t√≠ch c∆° b·∫£n: {'C√≥' if question_type['fundamental'] else 'Kh√¥ng'}
    - C·∫ßn ph√¢n t√≠ch k·ªπ thu·∫≠t: {'C√≥' if question_type['technical'] else 'Kh√¥ng'}  
    - C·∫ßn tin t·ª©c vƒ© m√¥: {'C√≥' if question_type['news'] else 'Kh√¥ng'}
    - C·∫ßn so s√°nh: {'C√≥' if question_type['comparison'] else 'Kh√¥ng'}
    - C·∫ßn khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞: {'C√≥' if question_type['investment_decision'] else 'Kh√¥ng'}
    
    **H∆Ø·ªöNG D·∫™N X·ª¨ L√ù:**
    1. X√°c ƒë·ªãnh m√£ ch·ª©ng kho√°n c·∫ßn ph√¢n t√≠ch t·ª´ c√¢u h·ªèi
    2. Ch·ªçn c√¥ng c·ª• ph√π h·ª£p:
       - Query Engine Tools: cho th√¥ng tin b√°o c√°o t√†i ch√≠nh
       - Function Tools: cho d·ªØ li·ªáu s·ªë v√† ch·ªâ s·ªë
    3. Thu th·∫≠p d·ªØ li·ªáu c·∫ßn thi·∫øt
    4. √Åp d·ª•ng g√≥c nh√¨n chuy√™n gia ph√π h·ª£p
    5. ƒê∆∞a ra ph√¢n t√≠ch v√† khuy·∫øn ngh·ªã r√µ r√†ng
    
    H√£y tr·∫£ l·ªùi m·ªôt c√°ch to√†n di·ªán v√† chuy√™n nghi·ªáp.
    """
    
    # Th·ª±c hi·ªán ph√¢n t√≠ch
    try:
        response = main_agent.chat(enhanced_prompt)
        
        # N·∫øu c·∫ßn khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞, t·∫°o th√™m agent chuy√™n v·ªÅ khuy·∫øn ngh·ªã
        if question_type['investment_decision']:
            strategist_agent = SimpleChatEngine.from_defaults(
                llm=llm_gpt4o,
                system_prompt=INVESTMENT_STRATEGIST_PROMPT
            )
            
            final_prompt = f"""
            **D·ªÆ LI·ªÜU PH√ÇN T√çCH:**
            {str(response)}
            
            **Y√äU C·∫¶U:** 
            D·ª±a tr√™n d·ªØ li·ªáu tr√™n, h√£y ƒë∆∞a ra khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞ cu·ªëi c√πng cho c√¢u h·ªèi: "{text}"
            
            **ƒê·ªäNH D·∫†NG TR√äND L·ªúI:**
            1. **T√≥m t·∫Øt ph√¢n t√≠ch** (2-3 c√¢u)
            2. **ƒê√°nh gi√° r·ªßi ro** (1-2 c√¢u)  
            3. **Khuy·∫øn ngh·ªã cu·ªëi c√πng: MUA/B√ÅN/GI·ªÆ** (in ƒë·∫≠m)
            4. **L√Ω do v√† ƒëi·ªÅu ki·ªán theo d√µi** (2-3 c√¢u)
            """
            
            final_response = strategist_agent.chat(final_prompt)
            return str(final_response)
        
        return str(response)
        
    except Exception as e:
        logger.error(f"L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch: {str(e)}")
        return f"Xin l·ªói, ƒë√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ph√¢n t√≠ch: {str(e)}. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ƒëi·ªÅu ch·ªânh c√¢u h·ªèi."

# H√†m wrapper cho vi·ªác s·ª≠ d·ª•ng (gi·ªØ t∆∞∆°ng th√≠ch v·ªõi code c≈©)
def chatbot_agent(text: str):
    """Wrapper function ƒë·ªÉ gi·ªØ t∆∞∆°ng th√≠ch v·ªõi code c≈©."""
    return intelligent_stock_advisor(text)

# # V√≠ d·ª• s·ª≠ d·ª•ng
# if __name__ == "__main__":
#     # Test cases
#     test_questions = [
#         "Ph√¢n t√≠ch c∆° b·∫£n c·ªï phi·∫øu FPT",
#         "So s√°nh P/E c·ªßa ACB v√† BID",
#         "Xu h∆∞·ªõng gi√° HPG trong th√°ng n√†y",
#         "N√™n mua hay b√°n VCB b√¢y gi·ªù?",
#         "Top 5 c·ªï phi·∫øu VN30 tƒÉng m·∫°nh nh·∫•t"
#     ]
    
#     print("ü§ñ VN30 Intelligent Stock Advisor")
#     print("=" * 50)
    
#     for i, question in enumerate(test_questions, 1):
#         print(f"\nüìã Test {i}: {question}")
#         print("-" * 30)
#         try:
#             answer = intelligent_stock_advisor(question)
#             print(f"üí° Tr·∫£ l·ªùi: {answer[:200]}...")
#         except Exception as e:
#             print(f"‚ùå L·ªói: {str(e)}")
    
#     # Interactive mode
#     print("\n" + "="*50)
#     print("üîÑ Ch·∫ø ƒë·ªô t∆∞∆°ng t√°c (g√µ 'exit' ƒë·ªÉ tho√°t)")
    
#     while True:
#         user_input = input("\nüë§ C√¢u h·ªèi c·ªßa b·∫°n: ")
#         if user_input.lower() == 'exit':
#             break
            
#         try:
#             response = intelligent_stock_advisor(user_input)
#             print(f"\nü§ñ T∆∞ v·∫•n: {response}")
#         except Exception as e:
#             print(f"‚ùå L·ªói: {str(e)}")